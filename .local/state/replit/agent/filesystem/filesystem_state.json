{"file_contents":{"app.py":{"content":"import os\nfrom flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session\nfrom config import Config\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom models import db, Product, Supplier, Category, Transaction, TransactionItem, Payment, PurchaseOrder, DiscountRule, PromoCode\nfrom models import PaymentMethod, TransactionStatus, UnitType\nfrom datetime import datetime, timedelta\nfrom sqlalchemy import or_, desc, func\nfrom decimal import Decimal\nimport secrets\nimport string\n\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object(Config)\n    \n    # Add ProxyFix for Replit environment\n    app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n    \n    # Initialize extensions\n    db.init_app(app)\n    \n    # Ensure upload directory exists\n    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n    \n    with app.app_context():\n        db.create_all()\n        initialize_sample_data()\n    \n    return app\n\ndef generate_transaction_number():\n    \"\"\"Generate unique transaction number\"\"\"\n    timestamp = datetime.now().strftime('%Y%m%d')\n    random_part = ''.join(secrets.choice(string.digits) for _ in range(4))\n    return f\"TXN{timestamp}{random_part}\"\n\ndef generate_order_number():\n    \"\"\"Generate unique purchase order number\"\"\"\n    timestamp = datetime.now().strftime('%Y%m%d')\n    random_part = ''.join(secrets.choice(string.digits) for _ in range(4))\n    return f\"PO{timestamp}{random_part}\"\n\ndef initialize_sample_data():\n    \"\"\"Initialize database with sample data if empty\"\"\"\n    if Category.query.count() == 0:\n        # Create categories for Kazakhstan market\n        category1 = Category(name=\"Сүт өнімдері\", description=\"Сүт, ірімшік, йогурт\")\n        category2 = Category(name=\"Нан өнімдері\", description=\"Нан, тоқаш, печенье\")\n        category3 = Category(name=\"Сусындар\", description=\"Шырын, газдалған сусындар, су\")\n        category4 = Category(name=\"Ет өнімдері\", description=\"Ет, шұжық, деликатестер\")\n        category5 = Category(name=\"Жемістер мен көкөністер\", description=\"Жаңа жемістер мен көкөністер\")\n        \n        categories = [category1, category2, category3, category4, category5]\n        \n        for category in categories:\n            db.session.add(category)\n        \n        # Create Kazakhstan supplier\n        supplier = Supplier(\n            name=\"ЖШС АлматыТрейд\",\n            contact_person=\"Асылбек Нұрболов\", \n            phone=\"+7 (727) 250-30-40\",\n            email=\"orders@almatytrade.kz\",\n            address=\"Алматы қ., Абай д-лы, 120, 050000\"\n        )\n        db.session.add(supplier)\n        \n        db.session.commit()\n        \n        # Create sample products for Kazakhstan market\n        product1 = Product(sku=\"MLK001\", name=\"Сүт 3.2% 1л\", price=320.00, cost_price=220.00, \n                           stock_quantity=50, min_stock_level=10, unit_type=UnitType.PIECE,\n                           supplier=supplier, category=categories[0])\n        product2 = Product(sku=\"BRD001\", name=\"Нан ақ\", price=180.00, cost_price=120.00,\n                           stock_quantity=30, min_stock_level=5, unit_type=UnitType.PIECE,\n                           supplier=supplier, category=categories[1])\n        product3 = Product(sku=\"JCE001\", name=\"Апельсин шырыны 1л\", price=580.00, cost_price=410.00,\n                           stock_quantity=25, min_stock_level=8, unit_type=UnitType.PIECE,\n                           supplier=supplier, category=categories[2])\n        product4 = Product(sku=\"CHE001\", name=\"Ірімшік қазақстандық\", price=2200.00, cost_price=1560.00,\n                           stock_quantity=15, min_stock_level=3, unit_type=UnitType.KILOGRAM,\n                           supplier=supplier, category=categories[0])\n        product5 = Product(sku=\"APL001\", name=\"Алма қызыл\", price=890.00, cost_price=590.00,\n                           stock_quantity=40, min_stock_level=10, unit_type=UnitType.KILOGRAM,\n                           supplier=supplier, category=categories[4])\n        \n        products = [product1, product2, product3, product4, product5]\n        \n        for product in products:\n            db.session.add(product)\n        \n        db.session.commit()\n        \n        # Create sample promo codes for testing\n        if PromoCode.query.count() == 0:\n            promo1 = PromoCode(\n                code=\"SAVE10\", \n                name=\"10% скидка\", \n                description=\"Скидка 10% на любую покупку\",\n                discount_type=\"percentage\", \n                discount_value=10.00, \n                min_amount=500.00, \n                max_uses=100, \n                current_uses=0, \n                is_active=True\n            )\n            \n            promo2 = PromoCode(\n                code=\"NEWCUSTOMER\", \n                name=\"Скидка новому клиенту\", \n                description=\"200₸ скидка для новых клиентов\",\n                discount_type=\"fixed_amount\", \n                discount_value=200.00, \n                min_amount=1000.00, \n                max_uses=50, \n                current_uses=0, \n                is_active=True\n            )\n            \n            promo3 = PromoCode(\n                code=\"WEEKEND\", \n                name=\"Выходная скидка\", \n                description=\"15% скидка на выходные\",\n                discount_type=\"percentage\", \n                discount_value=15.00, \n                min_amount=300.00, \n                max_uses=None,  # Unlimited\n                current_uses=0, \n                is_active=True,\n                start_date=datetime.utcnow(),\n                end_date=datetime.utcnow() + timedelta(days=30)\n            )\n            \n            promos = [promo1, promo2, promo3]\n            for promo in promos:\n                db.session.add(promo)\n            \n            db.session.commit()\n\n# Create the Flask app\napp = create_app()\n\n# Language support\ndef get_language():\n    \"\"\"Get current language from session\"\"\"\n    return session.get('language', 'kk')  # Default to Kazakh\n\ndef get_text(kk_text, ru_text):\n    \"\"\"Get text based on current language\"\"\"\n    if get_language() == 'ru':\n        return ru_text\n    return kk_text\n\n# Translation dictionaries\nTRANSLATIONS = {\n    'categories': {\n        'Сүт өнімдері': {'kk': 'Сүт өнімдері', 'ru': 'Молочные продукты'},\n        'Нан өнімдері': {'kk': 'Нан өнімдері', 'ru': 'Хлебобулочные'},\n        'Сусындар': {'kk': 'Сусындар', 'ru': 'Напитки'},\n        'Ет өнімдері': {'kk': 'Ет өнімдері', 'ru': 'Мясные продукты'},\n        'Жемістер мен көкөністер': {'kk': 'Жемістер мен көкөністер', 'ru': 'Фрукты и овощи'},\n    },\n    'products': {\n        'Сүт 3.2% 1л': {'kk': 'Сүт 3.2% 1л', 'ru': 'Молоко 3.2% 1л'},\n        'Нан ақ': {'kk': 'Нан ақ', 'ru': 'Хлеб белый'},\n        'Апельсин шырыны 1л': {'kk': 'Апельсин шырыны 1л', 'ru': 'Сок апельсиновый 1л'},\n        'Ірімшік қазақстандық': {'kk': 'Ірімшік қазақстандық', 'ru': 'Сыр казахстанский'},\n        'Алма қызыл': {'kk': 'Алма қызыл', 'ru': 'Яблоки красные'},\n    },\n    'units': {\n        'шт.': {'kk': 'дана', 'ru': 'шт.'},\n        'кг.': {'kk': 'кг.', 'ru': 'кг.'},\n        'л.': {'kk': 'л.', 'ru': 'л.'},\n        'м.': {'kk': 'м.', 'ru': 'м.'},\n        'упак.': {'kk': 'орам', 'ru': 'упак.'},\n    }\n}\n\ndef translate_name(original_name, category='products'):\n    \"\"\"Translate product/category name based on current language\"\"\"\n    translations = TRANSLATIONS.get(category, {})\n    if original_name in translations:\n        return translations[original_name].get(get_language(), original_name)\n    return original_name\n\n# Language switcher route\n@app.route('/set_language/<language>')\ndef set_language(language):\n    \"\"\"Set language preference\"\"\"\n    if language in ['kk', 'ru']:\n        session['language'] = language\n    return redirect(request.referrer or url_for('index'))\n\n# Make language functions available in templates\n@app.context_processor\ndef inject_language_functions():\n    return dict(get_language=get_language, get_text=get_text, translate_name=translate_name)\n\n# Routes\n@app.route('/')\ndef index():\n    \"\"\"Main dashboard\"\"\"\n    # Get quick stats for dashboard\n    total_products = Product.query.filter_by(is_active=True).count()\n    low_stock_count = Product.query.filter(Product.stock_quantity <= Product.min_stock_level).count()\n    \n    # Today's sales\n    today = datetime.now().date()\n    today_sales = db.session.query(func.sum(Transaction.total_amount)).filter(\n        func.date(Transaction.created_at) == today,\n        Transaction.status == TransactionStatus.COMPLETED\n    ).scalar() or 0\n    \n    # Recent transactions\n    recent_transactions = Transaction.query.filter_by(status=TransactionStatus.COMPLETED)\\\n        .order_by(desc(Transaction.created_at)).limit(5).all()\n    \n    return render_template('dashboard.html', \n                         total_products=total_products,\n                         low_stock_count=low_stock_count,\n                         today_sales=today_sales,\n                         recent_transactions=recent_transactions)\n\n@app.route('/pos')\ndef pos():\n    \"\"\"POS Terminal Interface\"\"\"\n    categories = Category.query.all()\n    # Translate category names for current language\n    for category in categories:\n        category.translated_name = translate_name(category.name, 'categories')\n    return render_template('pos.html', categories=categories)\n\n@app.route('/api/products/search')\ndef search_products():\n    \"\"\"API endpoint for live product search\"\"\"\n    query = request.args.get('q', '').strip()\n    category_id = request.args.get('category_id')\n    \n    if len(query) < 2 and not category_id:\n        return jsonify([])\n    \n    # Build search query\n    search_query = Product.query.filter_by(is_active=True)\n    \n    if query:\n        search_query = search_query.filter(\n            or_(\n                Product.name.ilike(f'%{query}%'),\n                Product.sku.ilike(f'%{query}%')\n            )\n        )\n    \n    if category_id:\n        search_query = search_query.filter_by(category_id=category_id)\n    \n    products = search_query.limit(10).all()\n    \n    return jsonify([{\n        'id': p.id,\n        'sku': p.sku,\n        'name': translate_name(p.name, 'products'),\n        'price': float(p.price),\n        'stock_quantity': p.stock_quantity,\n        'unit_type': translate_name(p.unit_type.value, 'units'),\n        'image_filename': p.image_filename\n    } for p in products])\n\n@app.route('/inventory')\ndef inventory():\n    \"\"\"Inventory management page\"\"\"\n    search = request.args.get('search', '')\n    category_id = request.args.get('category_id')\n    low_stock = request.args.get('low_stock')\n    \n    query = Product.query.filter_by(is_active=True)\n    \n    if search:\n        query = query.filter(\n            or_(\n                Product.name.ilike(f'%{search}%'),\n                Product.sku.ilike(f'%{search}%')\n            )\n        )\n    \n    if category_id:\n        query = query.filter_by(category_id=category_id)\n    \n    if low_stock:\n        query = query.filter(Product.stock_quantity <= Product.min_stock_level)\n    \n    products = query.order_by(Product.name).all()\n    categories = Category.query.all()\n    suppliers = Supplier.query.filter_by(is_active=True).all()\n    \n    # Translate names for current language\n    for product in products:\n        product.translated_name = translate_name(product.name, 'products')\n        product.translated_unit = translate_name(product.unit_type.value, 'units')\n    for category in categories:\n        category.translated_name = translate_name(category.name, 'categories')\n    \n    return render_template('inventory.html', \n                         products=products, \n                         categories=categories,\n                         suppliers=suppliers,\n                         search=search,\n                         selected_category=category_id,\n                         show_low_stock=low_stock)\n\n@app.route('/reports')\ndef reports():\n    \"\"\"Reports and analytics page\"\"\"\n    # Date range filter\n    start_date = request.args.get('start_date')\n    end_date = request.args.get('end_date')\n    \n    if not start_date:\n        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')\n    if not end_date:\n        end_date = datetime.now().strftime('%Y-%m-%d')\n    \n    # Sales by day\n    daily_sales = db.session.query(\n        func.date(Transaction.created_at).label('date'),\n        func.sum(Transaction.total_amount).label('total')\n    ).filter(\n        Transaction.status == TransactionStatus.COMPLETED,\n        func.date(Transaction.created_at) >= start_date,\n        func.date(Transaction.created_at) <= end_date\n    ).group_by(func.date(Transaction.created_at)).all()\n    \n    # Top selling products\n    top_products = db.session.query(\n        Product.name,\n        func.sum(TransactionItem.quantity).label('total_sold'),\n        func.sum(TransactionItem.total_price).label('total_revenue')\n    ).join(TransactionItem).join(Transaction).filter(\n        Transaction.status == TransactionStatus.COMPLETED,\n        func.date(Transaction.created_at) >= start_date,\n        func.date(Transaction.created_at) <= end_date\n    ).group_by(Product.id, Product.name).order_by(desc('total_sold')).limit(10).all()\n    \n    return render_template('reports.html',\n                         daily_sales=daily_sales,\n                         top_products=top_products,\n                         start_date=start_date,\n                         end_date=end_date)\n\n# API Routes for POS functionality\n@app.route('/api/transaction/start', methods=['POST'])\ndef start_transaction():\n    \"\"\"Start a new transaction\"\"\"\n    try:\n        data = request.get_json() or {}\n        cashier_name = data.get('cashier_name', 'Кассир')\n        customer_name = data.get('customer_name', '')\n        \n        transaction = Transaction(\n            transaction_number=generate_transaction_number(),\n            status=TransactionStatus.PENDING,\n            cashier_name=cashier_name,\n            customer_name=customer_name\n        )\n        \n        db.session.add(transaction)\n        db.session.commit()\n        \n        # Store transaction ID in session\n        session['current_transaction_id'] = transaction.id\n        \n        return jsonify({\n            'success': True,\n            'transaction_id': transaction.id,\n            'transaction_number': transaction.transaction_number\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/transaction/add_item', methods=['POST'])\ndef add_item_to_transaction():\n    \"\"\"Add item to current transaction\"\"\"\n    try:\n        data = request.get_json() or {}\n        transaction_id = session.get('current_transaction_id')\n        \n        if not transaction_id:\n            return jsonify({'success': False, 'error': 'Нет активной транзакции'}), 400\n        \n        transaction = Transaction.query.get(transaction_id)\n        if not transaction or transaction.status != TransactionStatus.PENDING:\n            return jsonify({'success': False, 'error': 'Транзакция недоступна'}), 400\n        \n        product = Product.query.get(data['product_id'])\n        if not product:\n            return jsonify({'success': False, 'error': 'Товар не найден'}), 404\n        \n        quantity = Decimal(str(data['quantity']))\n        if quantity <= 0:\n            return jsonify({'success': False, 'error': 'Неверное количество'}), 400\n        \n        # Check stock\n        if product.stock_quantity < float(quantity):\n            return jsonify({'success': False, 'error': 'Недостаточно товара на складе'}), 400\n        \n        # Create new item\n        item = TransactionItem(\n            transaction_id=transaction_id,\n            product_id=product.id,\n            quantity=quantity,\n            unit_price=product.price,\n            total_price=quantity * product.price,\n            discount_amount=Decimal('0.00')\n        )\n        db.session.add(item)\n        \n        # Update transaction totals\n        update_transaction_totals(transaction)\n        \n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'item': {\n                'product_name': product.name,\n                'quantity': quantity,\n                'unit_price': float(product.price),\n                'total_price': float(quantity * product.price)\n            },\n            'transaction_total': float(transaction.total_amount)\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/transaction/current')\ndef get_current_transaction():\n    \"\"\"Get current transaction details\"\"\"\n    transaction_id = session.get('current_transaction_id')\n    \n    if not transaction_id:\n        return jsonify({'success': False, 'error': 'Нет активной транзакции'})\n    \n    transaction = Transaction.query.get(transaction_id)\n    if not transaction:\n        return jsonify({'success': False, 'error': 'Транзакция не найдена'})\n    \n    items = []\n    for item in transaction.items:\n        items.append({\n            'id': item.id,\n            'product_name': item.product.name,\n            'sku': item.product.sku,\n            'quantity': float(item.quantity),\n            'unit_price': float(item.unit_price),\n            'discount_amount': float(item.discount_amount),\n            'total_price': float(item.total_price)\n        })\n    \n    return jsonify({\n        'success': True,\n        'transaction': {\n            'id': transaction.id,\n            'number': transaction.transaction_number,\n            'subtotal': float(transaction.subtotal),\n            'discount_amount': float(transaction.discount_amount),\n            'tax_amount': float(transaction.tax_amount),\n            'total_amount': float(transaction.total_amount),\n            'items': items\n        }\n    })\n\n@app.route('/api/transaction/complete', methods=['POST'])\ndef complete_transaction():\n    \"\"\"Complete transaction with payments\"\"\"\n    try:\n        data = request.get_json() or {}\n        transaction_id = session.get('current_transaction_id')\n        \n        if not transaction_id:\n            return jsonify({'success': False, 'error': 'Нет активной транзакции'}), 400\n        \n        transaction = Transaction.query.get(transaction_id)\n        if not transaction or transaction.status != TransactionStatus.PENDING:\n            return jsonify({'success': False, 'error': 'Транзакция недоступна'}), 400\n        \n        payments = data.get('payments', [])\n        if not payments:\n            return jsonify({'success': False, 'error': 'Не указаны способы оплаты'}), 400\n        \n        # Validate payment amounts\n        total_payment = sum(Decimal(str(p['amount'])) for p in payments)\n        if abs(total_payment - transaction.total_amount) > Decimal('0.01'):\n            return jsonify({'success': False, 'error': 'Сумма оплаты не совпадает с общей суммой'}), 400\n        \n        # Create payment records\n        for payment_data in payments:\n            payment = Payment(\n                transaction_id=transaction.id,\n                method=PaymentMethod(payment_data['method']),\n                amount=Decimal(str(payment_data['amount'])),\n                reference_number=payment_data.get('reference_number')\n            )\n            db.session.add(payment)\n        \n        # Update stock quantities\n        for item in transaction.items:\n            item.product.stock_quantity -= int(item.quantity)\n        \n        # Complete transaction\n        transaction.status = TransactionStatus.COMPLETED\n        transaction.completed_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        # Clear current transaction from session\n        session.pop('current_transaction_id', None)\n        \n        return jsonify({\n            'success': True,\n            'transaction_number': transaction.transaction_number,\n            'total_amount': float(transaction.total_amount)\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/transaction/suspend', methods=['POST'])\ndef suspend_transaction():\n    \"\"\"Suspend current transaction\"\"\"\n    try:\n        transaction_id = session.get('current_transaction_id')\n        \n        if not transaction_id:\n            return jsonify({'success': False, 'error': 'Нет активной транзакции'}), 400\n        \n        transaction = Transaction.query.get(transaction_id)\n        if not transaction:\n            return jsonify({'success': False, 'error': 'Транзакция не найдена'}), 400\n        \n        transaction.status = TransactionStatus.SUSPENDED\n        db.session.commit()\n        \n        # Clear current transaction from session\n        session.pop('current_transaction_id', None)\n        \n        return jsonify({\n            'success': True,\n            'message': f'Чек {transaction.transaction_number} отложен'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/transaction/remove_item', methods=['POST'])\ndef remove_item_from_transaction():\n    \"\"\"Remove item from current transaction\"\"\"\n    try:\n        data = request.get_json() or {}\n        transaction_id = session.get('current_transaction_id')\n        \n        if not transaction_id:\n            return jsonify({'success': False, 'error': 'Нет активной транзакции'}), 400\n        \n        item_id = data.get('item_id')\n        if not item_id:\n            return jsonify({'success': False, 'error': 'Не указан ID товара'}), 400\n        \n        item = TransactionItem.query.filter_by(\n            id=item_id, \n            transaction_id=transaction_id\n        ).first()\n        \n        if not item:\n            return jsonify({'success': False, 'error': 'Товар не найден в корзине'}), 404\n        \n        transaction = item.transaction\n        db.session.delete(item)\n        \n        # Update transaction totals\n        update_transaction_totals(transaction)\n        \n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'transaction_total': float(transaction.total_amount)\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n# Inventory Management Routes\n@app.route('/api/products', methods=['POST'])\ndef create_product():\n    \"\"\"Create new product\"\"\"\n    try:\n        data = request.get_json() or {}\n        \n        # Check if SKU already exists\n        existing_product = Product.query.filter_by(sku=data['sku']).first()\n        if existing_product:\n            return jsonify({'success': False, 'error': 'Товар с таким артикулом уже существует'}), 400\n        \n        product = Product(\n            sku=data['sku'],\n            name=data['name'],\n            description=data.get('description', ''),\n            unit_type=UnitType(data.get('unit_type', 'шт.')),\n            price=Decimal(str(data['price'])),\n            cost_price=Decimal(str(data.get('cost_price', 0))),\n            stock_quantity=int(data.get('stock_quantity', 0)),\n            min_stock_level=int(data.get('min_stock_level', 0)),\n            supplier_id=data.get('supplier_id'),\n            category_id=data.get('category_id')\n        )\n        \n        db.session.add(product)\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'product_id': product.id,\n            'message': 'Товар успешно создан'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/products/<int:product_id>', methods=['PUT'])\ndef update_product(product_id):\n    \"\"\"Update existing product\"\"\"\n    try:\n        product = Product.query.get_or_404(product_id)\n        data = request.get_json() or {}\n        \n        # Check SKU uniqueness if changed\n        if data.get('sku') and data['sku'] != product.sku:\n            existing = Product.query.filter_by(sku=data['sku']).first()\n            if existing:\n                return jsonify({'success': False, 'error': 'Товар с таким артикулом уже существует'}), 400\n        \n        # Update product fields\n        if 'sku' in data:\n            product.sku = data['sku']\n        if 'name' in data:\n            product.name = data['name']\n        if 'description' in data:\n            product.description = data['description']\n        if 'unit_type' in data:\n            product.unit_type = UnitType(data['unit_type'])\n        if 'price' in data:\n            product.price = Decimal(str(data['price']))\n        if 'cost_price' in data:\n            product.cost_price = Decimal(str(data['cost_price']))\n        if 'stock_quantity' in data:\n            product.stock_quantity = int(data['stock_quantity'])\n        if 'min_stock_level' in data:\n            product.min_stock_level = int(data['min_stock_level'])\n        if 'supplier_id' in data:\n            product.supplier_id = data['supplier_id']\n        if 'category_id' in data:\n            product.category_id = data['category_id']\n        \n        product.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'message': 'Товар успешно обновлен'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/products/<int:product_id>/stock', methods=['POST'])\ndef adjust_stock(product_id):\n    \"\"\"Adjust product stock level\"\"\"\n    try:\n        product = Product.query.get_or_404(product_id)\n        data = request.get_json() or {}\n        \n        adjustment = int(data.get('adjustment', 0))\n        reason = data.get('reason', 'Корректировка остатков')\n        \n        new_quantity = product.stock_quantity + adjustment\n        if new_quantity < 0:\n            return jsonify({'success': False, 'error': 'Остаток не может быть отрицательным'}), 400\n        \n        product.stock_quantity = new_quantity\n        product.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'new_quantity': product.stock_quantity,\n            'message': f'Остаток обновлен: {adjustment:+d} ({reason})'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/categories', methods=['POST'])\ndef create_category():\n    \"\"\"Create new category\"\"\"\n    try:\n        data = request.get_json() or {}\n        \n        category = Category(\n            name=data['name'],\n            description=data.get('description', '')\n        )\n        \n        db.session.add(category)\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'category_id': category.id,\n            'message': 'Категория успешно создана'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/suppliers', methods=['POST'])\ndef create_supplier():\n    \"\"\"Create new supplier\"\"\"\n    try:\n        data = request.get_json() or {}\n        \n        supplier = Supplier(\n            name=data['name'],\n            contact_person=data.get('contact_person', ''),\n            phone=data.get('phone', ''),\n            email=data.get('email', ''),\n            address=data.get('address', '')\n        )\n        \n        db.session.add(supplier)\n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'supplier_id': supplier.id,\n            'message': 'Поставщик успешно создан'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n# Discount System Routes\n@app.route('/api/transaction/apply_discount', methods=['POST'])\ndef apply_discount():\n    \"\"\"Apply discount to current transaction\"\"\"\n    try:\n        data = request.get_json() or {}\n        transaction_id = session.get('current_transaction_id')\n        \n        if not transaction_id:\n            return jsonify({'success': False, 'error': 'Нет активной транзакции'}), 400\n        \n        transaction = Transaction.query.get(transaction_id)\n        if not transaction:\n            return jsonify({'success': False, 'error': 'Транзакция не найдена'}), 400\n        \n        discount_type = data.get('type', 'percentage')  # percentage or fixed_amount\n        discount_value = float(data.get('value', 0))\n        \n        if discount_type == 'percentage':\n            discount_amount = transaction.subtotal * (discount_value / 100)\n        else:\n            discount_amount = discount_value\n        \n        # Ensure discount doesn't exceed subtotal\n        discount_amount = min(discount_amount, transaction.subtotal)\n        \n        transaction.discount_amount = discount_amount\n        update_transaction_totals(transaction)\n        \n        db.session.commit()\n        \n        return jsonify({\n            'success': True,\n            'discount_amount': float(discount_amount),\n            'total_amount': float(transaction.total_amount),\n            'message': f'Скидка {discount_value}{\"%\" if discount_type == \"percentage\" else \" ₽\"} применена'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/discount_rules')\ndef get_discount_rules():\n    \"\"\"Get active discount rules\"\"\"\n    now = datetime.utcnow()\n    rules = DiscountRule.query.filter(\n        DiscountRule.is_active == True,\n        or_(\n            DiscountRule.start_date.is_(None),\n            DiscountRule.start_date <= now\n        ),\n        or_(\n            DiscountRule.end_date.is_(None),\n            DiscountRule.end_date >= now\n        )\n    ).all()\n    \n    return jsonify([{\n        'id': rule.id,\n        'name': rule.name,\n        'description': rule.description,\n        'discount_type': rule.discount_type,\n        'discount_value': float(rule.discount_value),\n        'min_amount': float(rule.min_amount),\n        'category_name': rule.category.name if rule.category else None\n    } for rule in rules])\n\n@app.route('/api/promo_code/validate', methods=['POST'])\ndef validate_promo_code():\n    \"\"\"Validate promo code\"\"\"\n    try:\n        data = request.get_json() or {}\n        code = data.get('code', '').upper().strip()\n        \n        if not code:\n            return jsonify({'success': False, 'error': 'Промокод не указан'}), 400\n        \n        # Find promo code\n        promo = PromoCode.query.filter_by(code=code, is_active=True).first()\n        if not promo:\n            return jsonify({'success': False, 'error': 'Промокод не найден или не активен'}), 404\n        \n        now = datetime.utcnow()\n        \n        # Check date validity\n        if promo.start_date and promo.start_date > now:\n            return jsonify({'success': False, 'error': 'Промокод еще не активен'}), 400\n        \n        if promo.end_date and promo.end_date < now:\n            return jsonify({'success': False, 'error': 'Промокод истек'}), 400\n        \n        # Check usage limit\n        if promo.max_uses and promo.current_uses >= promo.max_uses:\n            return jsonify({'success': False, 'error': 'Промокод исчерпан'}), 400\n        \n        # Check minimum amount (if transaction exists)\n        transaction_id = session.get('current_transaction_id')\n        if transaction_id:\n            transaction = Transaction.query.get(transaction_id)\n            if transaction and transaction.subtotal < promo.min_amount:\n                return jsonify({\n                    'success': False, \n                    'error': f'Минимальная сумма для применения промокода: {float(promo.min_amount)} ₸'\n                }), 400\n        \n        return jsonify({\n            'success': True,\n            'promo_code': {\n                'id': promo.id,\n                'code': promo.code,\n                'name': promo.name,\n                'description': promo.description,\n                'discount_type': promo.discount_type,\n                'discount_value': float(promo.discount_value),\n                'min_amount': float(promo.min_amount)\n            }\n        })\n        \n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/transaction/apply_promo', methods=['POST'])\ndef apply_promo_to_transaction():\n    \"\"\"Apply promo code to current transaction with proper atomicity\"\"\"\n    try:\n        data = request.get_json() or {}\n        code = data.get('code', '').upper().strip()\n        transaction_id = session.get('current_transaction_id')\n        \n        if not transaction_id:\n            return jsonify({'success': False, 'error': 'Нет активной транзакции'}), 400\n        \n        if not code:\n            return jsonify({'success': False, 'error': 'Промокод не указан'}), 400\n            \n        # Use transaction for atomicity\n        with db.session.begin():\n            # Get and lock the transaction\n            transaction = db.session.query(Transaction).filter_by(id=transaction_id).with_for_update().first()\n            if not transaction or transaction.status != TransactionStatus.PENDING:\n                return jsonify({'success': False, 'error': 'Транзакция недоступна'}), 400\n            \n            # Check if promo already applied\n            if transaction.promo_code_used:\n                return jsonify({'success': False, 'error': 'Промокод уже применен к этой транзакции'}), 400\n            \n            # Get and lock the promo code\n            promo = db.session.query(PromoCode).filter(\n                func.upper(PromoCode.code) == code,\n                PromoCode.is_active == True\n            ).with_for_update().first()\n            \n            if not promo:\n                return jsonify({'success': False, 'error': 'Промокод не найден или не активен'}), 404\n            \n            now = datetime.utcnow()\n            \n            # Validate promo code constraints\n            if promo.start_date and promo.start_date > now:\n                return jsonify({'success': False, 'error': 'Промокод еще не активен'}), 400\n            \n            if promo.end_date and promo.end_date < now:\n                return jsonify({'success': False, 'error': 'Промокод истек'}), 400\n            \n            if promo.max_uses and promo.current_uses >= promo.max_uses:\n                return jsonify({'success': False, 'error': 'Промокод исчерпан'}), 400\n            \n            if transaction.subtotal < promo.min_amount:\n                return jsonify({\n                    'success': False, \n                    'error': f'Минимальная сумма для применения промокода: {float(promo.min_amount)} ₸'\n                }), 400\n            \n            # Calculate discount\n            if promo.discount_type == 'percentage':\n                discount_amount = transaction.subtotal * (promo.discount_value / 100)\n            else:\n                discount_amount = promo.discount_value\n            \n            # Ensure discount doesn't exceed subtotal\n            discount_amount = min(discount_amount, transaction.subtotal)\n            \n            # Apply discount to transaction\n            transaction.discount_amount = discount_amount\n            transaction.promo_code_used = code\n            update_transaction_totals(transaction)\n            \n            # Note: Don't increment usage here - only on successful checkout\n            \n            return jsonify({\n                'success': True,\n                'promo_code': code,\n                'discount_amount': float(discount_amount),\n                'total_amount': float(transaction.total_amount),\n                'message': f'Промокод \"{code}\" применен! Скидка: {float(promo.discount_value)}{\"%\" if promo.discount_type == \"percentage\" else \" ₸\"}'\n            })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@app.route('/api/transaction/remove_promo', methods=['POST'])\ndef remove_promo_from_transaction():\n    \"\"\"Remove promo code from current transaction\"\"\"\n    try:\n        transaction_id = session.get('current_transaction_id')\n        \n        if not transaction_id:\n            return jsonify({'success': False, 'error': 'Нет активной транзакции'}), 400\n            \n        with db.session.begin():\n            transaction = db.session.query(Transaction).filter_by(id=transaction_id).with_for_update().first()\n            if not transaction or transaction.status != TransactionStatus.PENDING:\n                return jsonify({'success': False, 'error': 'Транзакция недоступна'}), 400\n            \n            if not transaction.promo_code_used:\n                return jsonify({'success': False, 'error': 'Промокод не применен'}), 400\n            \n            # Remove discount\n            transaction.discount_amount = Decimal('0.00')\n            transaction.promo_code_used = None\n            update_transaction_totals(transaction)\n            \n            return jsonify({\n                'success': True,\n                'total_amount': float(transaction.total_amount),\n                'message': 'Промокод удален'\n            })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n# Analytics and Reports Routes\n@app.route('/api/analytics/top_products')\ndef get_top_products():\n    \"\"\"Get top selling products analytics\"\"\"\n    days = request.args.get('days', 30, type=int)\n    start_date = datetime.utcnow() - timedelta(days=days)\n    \n    # Top products by quantity\n    top_by_quantity = db.session.query(\n        Product.name,\n        Product.sku,\n        func.sum(TransactionItem.quantity).label('total_sold'),\n        func.sum(TransactionItem.total_price).label('total_revenue'),\n        func.count(TransactionItem.id).label('transaction_count')\n    ).join(TransactionItem).join(Transaction).filter(\n        Transaction.status == TransactionStatus.COMPLETED,\n        Transaction.created_at >= start_date\n    ).group_by(Product.id, Product.name, Product.sku)\\\n     .order_by(desc('total_sold')).limit(10).all()\n    \n    # Low performing products\n    low_performing = db.session.query(\n        Product.name,\n        Product.sku,\n        func.sum(TransactionItem.quantity).label('total_sold'),\n        func.sum(TransactionItem.total_price).label('total_revenue')\n    ).join(TransactionItem).join(Transaction).filter(\n        Transaction.status == TransactionStatus.COMPLETED,\n        Transaction.created_at >= start_date\n    ).group_by(Product.id, Product.name, Product.sku)\\\n     .order_by('total_sold').limit(10).all()\n    \n    return jsonify({\n        'top_products': [{\n            'name': p.name,\n            'sku': p.sku,\n            'total_sold': float(p.total_sold),\n            'total_revenue': float(p.total_revenue),\n            'transaction_count': p.transaction_count\n        } for p in top_by_quantity],\n        'low_performing': [{\n            'name': p.name,\n            'sku': p.sku,\n            'total_sold': float(p.total_sold),\n            'total_revenue': float(p.total_revenue)\n        } for p in low_performing]\n    })\n\n@app.route('/api/analytics/sales_summary')\ndef get_sales_summary():\n    \"\"\"Get sales summary for dashboard\"\"\"\n    today = datetime.utcnow().date()\n    start_of_month = today.replace(day=1)\n    \n    # Today's sales\n    today_sales = db.session.query(\n        func.sum(Transaction.total_amount),\n        func.count(Transaction.id)\n    ).filter(\n        func.date(Transaction.created_at) == today,\n        Transaction.status == TransactionStatus.COMPLETED\n    ).first()\n    \n    # Month's sales\n    month_sales = db.session.query(\n        func.sum(Transaction.total_amount),\n        func.count(Transaction.id)\n    ).filter(\n        func.date(Transaction.created_at) >= start_of_month,\n        Transaction.status == TransactionStatus.COMPLETED\n    ).first()\n    \n    # Low stock alerts\n    low_stock_products = Product.query.filter(\n        Product.stock_quantity <= Product.min_stock_level,\n        Product.is_active == True\n    ).count()\n    \n    return jsonify({\n        'today': {\n            'revenue': float(today_sales[0] if today_sales and today_sales[0] else 0),\n            'transactions': today_sales[1] if today_sales and today_sales[1] else 0\n        },\n        'month': {\n            'revenue': float(month_sales[0] if month_sales and month_sales[0] else 0),\n            'transactions': month_sales[1] if month_sales and month_sales[1] else 0\n        },\n        'low_stock_count': low_stock_products\n    })\n\ndef update_transaction_totals(transaction):\n    \"\"\"Update transaction totals based on items\"\"\"\n    # Ensure all values are Decimal for proper arithmetic\n    subtotal = Decimal('0.00')\n    for item in transaction.items:\n        item_total = item.total_price or Decimal('0.00')\n        item_discount = item.discount_amount or Decimal('0.00')\n        subtotal += (item_total - item_discount)\n    \n    transaction.subtotal = subtotal\n    transaction.tax_amount = subtotal * Decimal('0.12')  # 12% VAT (Kazakhstan rate)\n    transaction.total_amount = subtotal + transaction.tax_amount - (transaction.discount_amount or Decimal('0.00'))\n\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('500.html'), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":43594},"config.py":{"content":"import os\nfrom datetime import timedelta\n\nclass Config:\n    SECRET_KEY = os.environ.get('SESSION_SECRET')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SQLALCHEMY_ENGINE_OPTIONS = {\n        \"pool_recycle\": 300,\n        \"pool_pre_ping\": True,\n    }\n    UPLOAD_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static', 'images')\n    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size\n    \n    # POS specific settings for Kazakhstan\n    CURRENCY_SYMBOL = '₸'\n    TAX_RATE = 0.12  # 12% VAT (Kazakhstan standard rate)\n    RECEIPT_FOOTER = 'Рахмет сатып алғаныңыз үшін! / Спасибо за покупку!'\n    COUNTRY_CODE = 'KZ'\n    PHONE_FORMAT = '+7 (XXX) XXX-XX-XX'\n    \n    # Session settings\n    PERMANENT_SESSION_LIFETIME = timedelta(hours=8)","size_bytes":862},"models.py":{"content":"from flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\nfrom enum import Enum\n\ndb = SQLAlchemy()\n\nclass PaymentMethod(Enum):\n    CASH = \"cash\"\n    CARD = \"card\"\n    TRANSFER = \"transfer\"\n\nclass TransactionStatus(Enum):\n    PENDING = \"pending\"\n    COMPLETED = \"completed\"\n    SUSPENDED = \"suspended\"\n    CANCELLED = \"cancelled\"\n\nclass UnitType(Enum):\n    PIECE = \"шт.\"\n    KILOGRAM = \"кг.\"\n    LITER = \"л.\"\n    METER = \"м.\"\n    PACK = \"упак.\"\n\nclass Supplier(db.Model):\n    __tablename__ = 'suppliers'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    contact_person = db.Column(db.String(100))\n    phone = db.Column(db.String(20))\n    email = db.Column(db.String(100))\n    address = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    is_active = db.Column(db.Boolean, default=True)\n    \n    # Relationships\n    products = db.relationship('Product', backref='supplier', lazy=True)\n    purchase_orders = db.relationship('PurchaseOrder', backref='supplier', lazy=True)\n\nclass Category(db.Model):\n    __tablename__ = 'categories'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50), nullable=False, unique=True)\n    description = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    products = db.relationship('Product', backref='category', lazy=True)\n\nclass Product(db.Model):\n    __tablename__ = 'products'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    sku = db.Column(db.String(50), unique=True, nullable=False)\n    name = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    unit_type = db.Column(db.Enum(UnitType), default=UnitType.PIECE)\n    price = db.Column(db.Numeric(10, 2), nullable=False)\n    cost_price = db.Column(db.Numeric(10, 2), default=0.00)  # For profit calculation\n    stock_quantity = db.Column(db.Integer, default=0)\n    min_stock_level = db.Column(db.Integer, default=0)\n    image_filename = db.Column(db.String(100))\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign keys\n    supplier_id = db.Column(db.Integer, db.ForeignKey('suppliers.id'))\n    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'))\n    \n    # Relationships\n    transaction_items = db.relationship('TransactionItem', backref='product', lazy=True)\n    purchase_order_items = db.relationship('PurchaseOrderItem', backref='product', lazy=True)\n    \n    @property\n    def is_low_stock(self):\n        return self.stock_quantity <= self.min_stock_level\n    \n    @property\n    def profit_margin(self):\n        if self.cost_price > 0:\n            return ((self.price - self.cost_price) / self.price * 100)\n        return 0\n\nclass Transaction(db.Model):\n    __tablename__ = 'transactions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    transaction_number = db.Column(db.String(20), unique=True, nullable=False)\n    status = db.Column(db.Enum(TransactionStatus), default=TransactionStatus.PENDING)\n    subtotal = db.Column(db.Numeric(10, 2), default=0.00)\n    discount_amount = db.Column(db.Numeric(10, 2), default=0.00)\n    tax_amount = db.Column(db.Numeric(10, 2), default=0.00)\n    total_amount = db.Column(db.Numeric(10, 2), default=0.00)\n    cashier_name = db.Column(db.String(100))\n    customer_name = db.Column(db.String(100))\n    promo_code_used = db.Column(db.String(20))  # Store applied promo code\n    notes = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    completed_at = db.Column(db.DateTime)\n    \n    # Relationships\n    items = db.relationship('TransactionItem', backref='transaction', lazy=True, cascade='all, delete-orphan')\n    payments = db.relationship('Payment', backref='transaction', lazy=True, cascade='all, delete-orphan')\n\nclass TransactionItem(db.Model):\n    __tablename__ = 'transaction_items'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    quantity = db.Column(db.Numeric(10, 3), nullable=False)\n    unit_price = db.Column(db.Numeric(10, 2), nullable=False)\n    discount_amount = db.Column(db.Numeric(10, 2), default=0.00)\n    total_price = db.Column(db.Numeric(10, 2), nullable=False)\n    \n    # Foreign keys\n    transaction_id = db.Column(db.Integer, db.ForeignKey('transactions.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n\nclass Payment(db.Model):\n    __tablename__ = 'payments'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    method = db.Column(db.Enum(PaymentMethod), nullable=False)\n    amount = db.Column(db.Numeric(10, 2), nullable=False)\n    reference_number = db.Column(db.String(100))  # For card/transfer payments\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign key\n    transaction_id = db.Column(db.Integer, db.ForeignKey('transactions.id'), nullable=False)\n\nclass PurchaseOrder(db.Model):\n    __tablename__ = 'purchase_orders'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    order_number = db.Column(db.String(20), unique=True, nullable=False)\n    order_date = db.Column(db.DateTime, default=datetime.utcnow)\n    delivery_date = db.Column(db.DateTime)\n    status = db.Column(db.String(20), default='pending')  # pending, received, cancelled\n    total_amount = db.Column(db.Numeric(10, 2), default=0.00)\n    notes = db.Column(db.Text)\n    \n    # Foreign key\n    supplier_id = db.Column(db.Integer, db.ForeignKey('suppliers.id'), nullable=False)\n    \n    # Relationships\n    items = db.relationship('PurchaseOrderItem', backref='purchase_order', lazy=True, cascade='all, delete-orphan')\n\nclass PurchaseOrderItem(db.Model):\n    __tablename__ = 'purchase_order_items'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    quantity = db.Column(db.Integer, nullable=False)\n    unit_cost = db.Column(db.Numeric(10, 2), nullable=False)\n    total_cost = db.Column(db.Numeric(10, 2), nullable=False)\n    \n    # Foreign keys\n    purchase_order_id = db.Column(db.Integer, db.ForeignKey('purchase_orders.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('products.id'), nullable=False)\n\nclass DiscountRule(db.Model):\n    __tablename__ = 'discount_rules'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    discount_type = db.Column(db.String(20), nullable=False)  # percentage, fixed_amount\n    discount_value = db.Column(db.Numeric(10, 2), nullable=False)\n    min_amount = db.Column(db.Numeric(10, 2), default=0.00)\n    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'))\n    is_active = db.Column(db.Boolean, default=True)\n    start_date = db.Column(db.DateTime)\n    end_date = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass PromoCode(db.Model):\n    __tablename__ = 'promo_codes'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    code = db.Column(db.String(20), unique=True, nullable=False)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    discount_type = db.Column(db.String(20), nullable=False)  # percentage, fixed_amount\n    discount_value = db.Column(db.Numeric(10, 2), nullable=False)\n    min_amount = db.Column(db.Numeric(10, 2), default=0.00)\n    max_uses = db.Column(db.Integer, default=None)  # None = unlimited\n    current_uses = db.Column(db.Integer, default=0)\n    is_active = db.Column(db.Boolean, default=True)\n    start_date = db.Column(db.DateTime)\n    end_date = db.Column(db.DateTime)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)","size_bytes":7856},"pyproject.toml":{"content":"[project]\nname = \"pos-system\"\nversion = \"0.1.0\"\ndescription = \"Point of Sale System for Kazakhstan market\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask-wtf>=1.2.2\",\n    \"gunicorn>=23.0.0\",\n    \"pillow>=11.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n    \"wtforms>=3.2.1\",\n]\n\n[tool.setuptools]\npackages = []\n\n[tool.setuptools.package-data]\n\"*\" = [\"templates/**/*\", \"static/**/*\"]\n","size_bytes":511},"replit.md":{"content":"# POS System for Kazakhstan Market\n\n## Overview\nThis is a Point of Sale (POS) system designed specifically for the Kazakhstan market, featuring bilingual support (Kazakh/Russian). The system provides comprehensive retail management functionality including sales processing, inventory management, and reporting.\n\n## Recent Changes (September 26, 2025)\n- Set up the application for Replit environment\n- Migrated from SQLite to PostgreSQL database  \n- Configured proper Flask application with ProxyFix middleware for Replit\n- Installed all Python dependencies using uv package manager\n- Created proper workflow configuration for port 5000 with webview output\n- Fixed analytics function to handle None query results properly\n- Created main.py entry point for Gunicorn deployment\n- Configured deployment settings for autoscale production deployment\n- Set up static/images directory for file uploads\n- Verified all major features work: Dashboard, POS Terminal, Inventory Management\n\n## Architecture\n- **Backend**: Flask application with SQLAlchemy ORM\n- **Database**: PostgreSQL (Replit-managed)\n- **Frontend**: HTML templates with Bootstrap styling\n- **Language Support**: Kazakh and Russian (bilingual interface)\n\n## Key Features\n- **POS Terminal**: Complete sales transaction processing\n- **Inventory Management**: Product catalog with stock tracking\n- **Reporting**: Sales analytics and reporting dashboard\n- **Kazakhstan-specific**: Tax calculations (12% VAT), currency (₸), local language support\n\n## Project Structure\n- `app.py` - Main Flask application with all routes and business logic\n- `models.py` - Database models for all entities\n- `config.py` - Application configuration\n- `templates/` - Jinja2 HTML templates\n- `static/` - Static assets (CSS, JS, images)\n\n## Database Configuration\n- Uses PostgreSQL via DATABASE_URL environment variable\n- Automatic database initialization with sample Kazakhstan market data\n- Models include: Products, Categories, Suppliers, Transactions, Payments, etc.\n\n## Deployment\n- Configured for Replit autoscale deployment\n- Uses Gunicorn WSGI server for production\n- Listens on port 5000 for both development and production\n\n## Dependencies\nAll dependencies are managed through pyproject.toml and include Flask, SQLAlchemy, PostgreSQL driver, and other essential packages.","size_bytes":2312},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":98}},"version":1}